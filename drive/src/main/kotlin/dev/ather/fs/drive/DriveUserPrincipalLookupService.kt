package dev.ather.fs.drive

import java.nio.file.attribute.UserPrincipalLookupService

abstract class DriveUserPrincipalLookupService<T : DriveUserPrincipal> private constructor() :
    UserPrincipalLookupService() {

    /**
     * Get the [DriveUserPrincipal] for the given [principalName]. [principalName]'s format is application-specific.
     * This could be the user's Google Account ID, but could just as easily be a UUID generated by the calling application.
     */
    operator fun get(principalName: String?): T = lookupPrincipalByName(principalName)

    /**
     * Get the [DriveUserPrincipal] for the given [name]. [name]'s format is application-specific.
     * This could be the user's Google Account ID, but could just as easily be a UUID generated by the calling application.
     */
    abstract override fun lookupPrincipalByName(name: String?): T

    /**
     * The [DriveUserPrincipalLookupService] used for retrieving OAuth credentials. This requires more information than service accounts.
     * And implementation of this class _may_ support both OAuth _and_ service accounts, but that support is implementation-dependent.
     */
    abstract class DriveOAuth2PrincipalLookupService : DriveUserPrincipalLookupService<DriveUserPrincipal>() {

        /**
         * Get the [OAuth2Secrets] with which to make all drive requests.
         */
        abstract val secrets: OAuth2Secrets

        /**
         * Update the [DriveUserPrincipal] for the given [principalName]. This is in the case that an OAuth token needs to be refreshed
         */
        abstract operator fun set(principalName: String?, credential: DriveUserPrincipal.OAuth2Principal)
    }

    /**
     * The [DriveUserPrincipalLookupService] used for exclusively retrieving service account credentials. This provider is not able to support OAuth credentials.
     */
    abstract class DriveServiceAccountPrincipalLookupService :
        DriveUserPrincipalLookupService<DriveUserPrincipal.ServiceAccountPrincipal>()
}
